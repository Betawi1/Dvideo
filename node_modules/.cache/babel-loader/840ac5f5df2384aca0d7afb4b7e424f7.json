{"ast":null,"code":"import _regeneratorRuntime from \"/home/rashdan/dvideo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rashdan/dvideo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/rashdan/dvideo/src/components/App.js\";\nimport React, { Component } from 'react';\nimport DVideo from '../abis/DVideo.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, dvideo, videosCount, i, video, latest;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; //Load accounts\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              //Add first account the the state\n              _this2.setState({\n                account: accounts[0]\n              }); //Get network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              //Get network data\n              networkData = DVideo.networks[networkId]; //Check if net data exists, then\n\n              if (!networkData) {\n                _context3.next = 32;\n                break;\n              }\n\n              //Assign dvideo contract to a variable\n              //Add dvideo to the state\n              dvideo = new web3.eth.Contract(DVideo.abi, DVideo.networks[networkId].address);\n\n              _this2.setState({\n                dvideo\n              }); //fetch the video\n              //Check videoAmounts\n              //Add videAmounts to the state\n\n\n              _context3.next = 14;\n              return dvideo.methods.videoCount().call();\n\n            case 14:\n              videosCount = _context3.sent;\n\n              _this2.setState({\n                videosCount\n              }); //load the video, sort by newest\n\n\n              i = videosCount;\n\n            case 17:\n              if (!(i >= 1)) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 20;\n              return dvideo.methods.videos(i).call();\n\n            case 20:\n              video = _context3.sent;\n\n              _this2.setState({\n                videos: [..._this2.state.videos, video]\n              });\n\n            case 22:\n              i--;\n              _context3.next = 17;\n              break;\n\n            case 25:\n              _context3.next = 27;\n              return dvideo.methods.videos(videosCount).call();\n\n            case 27:\n              latest = _context3.sent;\n\n              _this2.setState({\n                currentHash: latest.hash,\n                currentTitle: latest.title\n              });\n\n              _this2.setState({\n                loading: false\n              }); //If network data doesn't exisits, log error\n\n\n              _context3.next = 33;\n              break;\n\n            case 32:\n              window.alert('DVideo contract not deployed to detected network.');\n\n            case 33:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } //Get video (capture and convert it to buffer and add to state), prepare the file to upload to IPFS.\n\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadVideo = title => {};\n\n    this.changeVideo = (hash, title) => {};\n\n    this.state = {\n      loading: false,\n      account: '',\n      dvideo: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null //set states\n\n    }; //Bind functions\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar //Account\n    , {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main //states&functions\n    , {\n      captureFile: this.captureFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rashdan/dvideo/src/components/App.js"],"names":["React","Component","DVideo","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","dvideo","Contract","abi","address","methods","videoCount","call","videosCount","i","videos","video","state","latest","currentHash","hash","currentTitle","title","loading","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","uploadVideo","changeVideo","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DVideo from '../abis/DVideo.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    //Load accounts\n    const accounts = await web3.eth.getAccounts()\n\n    //Add first account the the state\n    this.setState({ account: accounts[0] })\n    //Get network ID\n      const networkId = await web3.eth.net.getId()\n    //Get network data\n      const networkData = DVideo.networks[networkId]\n    //Check if net data exists, then\n      if(networkData) {\n        //Assign dvideo contract to a variable\n        //Add dvideo to the state\n        const dvideo = new web3.eth.Contract(DVideo.abi, DVideo.networks[networkId].address)\n        this.setState({ dvideo })\n        //fetch the video\n        //Check videoAmounts\n        //Add videAmounts to the state\n        const videosCount = await dvideo.methods.videoCount().call()\n        this.setState({ videosCount })\n\n        //load the video, sort by newest\n\n        for (var i=videosCount; i>=1; i--) {\n          const video = await dvideo.methods.videos(i).call()\n          this.setState({\n            videos: [...this.state.videos, video]\n          })\n        }\n  //Iterate throught videos and add them to the state (by newest)\n        //set latest video with title to view as default\n          //Set loading state to false\n        const latest = await dvideo.methods.videos(videosCount).call()\n        this.setState({\n          currentHash: latest.hash,\n          currentTitle: latest.title\n        })\n        this.setState({ loading: false})\n\n//If network data doesn't exisits, log error\n      } else {\n        window.alert('DVideo contract not deployed to detected network.')\n      }\n\n  }\n\n  //Get video (capture and convert it to buffer and add to state), prepare the file to upload to IPFS.\n  captureFile = event => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n\n  }\n\n  //Upload video\n  uploadVideo = title => {\n\n  }\n\n  //Change Video\n  changeVideo = (hash, title) => {\n\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: false,\n      account: '',\n      dvideo: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null\n      //set states\n    }\n\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          //Account\n          account={this.state.account}\n        />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              //states&functions\n              captureFile={this.captureFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}